@page "/roles"
@using Bondlog.Client.Pages.Dialogs;
@using Bondlog.Client.Services.Interfaces;
@using Microsoft.AspNetCore.Identity;
@inject IDialogService DialogService
@inject NavigationManager NavigationManager;
@inject IGetRolesService RolesService;
@inject IRemoveRoleService RemoveRoleService;

<h3>Authorisation Roles</h3>

<head>
    <link href="/css/components/roles.css" rel="stylesheet" />
</head>

@if (roles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="custom-data-grid">
        <p/>
        <MudButton Size="@Size.Small" AutoRefresh="true" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="() => OpenAddNewRoleDialog()">Add New Role</MudButton>
        <p/>
        <MudDataGrid Items="@roles" Filterable="false" SortMode="@SortMode.None" Groupable="false">
            <Columns>
                <PropertyColumn Property="x => x.Name" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                         <MudButton Size="@Size.Small" Variant="@Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="@Color.Primary" OnClick="() => OpenEditRoleDialog(context.Item)">Edit</MudButton>
                         <MudButton Size="@Size.Small" Variant="@Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="@Color.Error" OnClick="() => OpenDeleteRoleDialog(context.Item.Name)">Delete</MudButton>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>

    </div>
}

@code {
    private IEnumerable<IdentityRole> roles;

    protected override async Task OnInitializedAsync()
    {
        this.roles = await GetRolesAsync();
    }

    private async Task OpenAddNewRoleDialog()
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small
            };
        var result = await this.DialogService.Show<AddRoleDialog>("Add New Role", options).Result;

        if (!result.Cancelled)
            this.roles = await GetRolesAsync();
    }

    private async Task OpenEditRoleDialog(IdentityRole model)
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small
            };
        var parameters = new DialogParameters { { "roleModel", model } };
        var result = await this.DialogService.Show<EditRoleDialog>(string.Empty, parameters, options).Result;

        if (!result.Cancelled)
            this.roles = await GetRolesAsync();
    }

    private async Task OpenDeleteRoleDialog(string roleName)
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small
            };
        var parameters = new DialogParameters { { "roleName", roleName } };
        var result = await this.DialogService.Show<RemoveRoleDialog>(string.Empty, parameters, options).Result;

        if (!result.Cancelled)
            this.roles = await GetRolesAsync();
    }

    private async Task<IEnumerable<IdentityRole>> GetRolesAsync()
    {
        var roles = await RolesService.GetRolesAsync();
        return roles.OrderBy(r => r.Name);
    }
}