@page "/register"
@attribute [Authorize(Roles = "Administrator")]
@using Bondlog.Client.Services;
@using Bondlog.Shared.Domain.Models;
@using Microsoft.AspNetCore.Identity;
@using Bondlog.Client.Services.Interfaces;
@inject IRegisterUserService RegisterUserService;
@inject NavigationManager NavigationManager;
@inject IGetRolesService RolesService;
@inject IJSRuntime JSRuntime

<head>
    <link href="/css/components/register.css" rel="stylesheet" />
</head>

<h1 class="title">Register New User</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach(var error in Errors!)
        {
            <p>@error</p>
        }
    </div>
}

<div class="custom-data-grid">
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Please enter details</h5>
            <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group fields">
                    <label for="email" class="labels">Email address</label>
                    <InputText id="email" class="form-control" @bind-Value="RegisterModel.Email" autocomplete="off" />
                    <ValidationMessage For="@(() => RegisterModel.Email)" />
                </div>
                <div class="form-group fields">
                    <label for="password" class="labels">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="RegisterModel.Password" autocomplete="off" />
                    <ValidationMessage For="@(() => RegisterModel.Password)" />
                </div>
                <div class="form-group fields">
                    <label for="cpassword" class="labels">Confirm Password</label>
                    <InputText id="cpassword" type="password" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" autocomplete="off" />
                    <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
                </div>

                <div class="form-group fields">
                    <label for="role" class="labels">User Role</label>
                    @if (roles != null)
                    {
                        <InputSelect id="role" class="form-control" @bind-Value="RegisterModel.UserRole">
                            @foreach (var role in roles)
                            {
                                <option value="@role.Name">@role.Name</option>
                            }
                        </InputSelect>
                    }
                    <i class="dropdown-icon fas fa-caret-down"></i>
                    <ValidationMessage For="@(() => RegisterModel.UserRole)" />
                </div>

                <button type="submit" class="btn btn-primary submit">Submit</button>
            </EditForm>
        </div>
    </div>
</div>

<script>
    window.showPopup = (message) => {
        DotNet.invokeMethodAsync('alert', 'ShowPopup', message);
    };
</script>

@code {
    private RegisterModel RegisterModel = new RegisterModel();
    private bool ShowErrors;
    private IEnumerable<string>? Errors;
    private IEnumerable<IdentityRole> roles;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync check point");
        roles = await RolesService.GetRolesAsync();
    }

    private async Task HandleRegistration()
    {
        ShowErrors = false;

        var result = await RegisterUserService.RegisterUser(RegisterModel);

        if(result.Successful)
        {
            await JSRuntime.InvokeVoidAsync("alert", "User has been registered");
            ClearEditForm();
        }
        else
        {
            ShowErrors = true;
        }
    }

    private void ClearEditForm()
    {
        RegisterModel = new RegisterModel
            {
                Email = string.Empty,
                Password = string.Empty,
                ConfirmPassword = string.Empty,
                UserRole = string.Empty
            };
    }
}