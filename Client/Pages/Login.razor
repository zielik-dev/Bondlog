@page "/login"
@using Blazor.SubtleCrypto;
@using Blazored.LocalStorage;
@using Bondlog.Client.Providers;
@using Bondlog.Client.Services;
@using Bondlog.Shared.Domain.Models;
@using Microsoft.AspNetCore.Components.Authorization;
@using Bondlog.Client.Interfaces;
@inject IJSRuntime js;
@inject IAuthService authService
@inject ICryptoService cryptoService
@inject ILocalStorageService localStorageService;
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider;

<h1>Login</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert"> 
        <p>@Error</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>



@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error = "";

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;

        if (user!.Identity!.IsAuthenticated)
            navigationManager.NavigateTo("/");
        else
            await base.OnInitializedAsync();
    }

    public async Task HandleLogin()
    {
        ShowErrors = false;

        var result = await authService.LoginUser(loginModel);

        if (result.Token is not null || result.Username is not null || result.UserRole is not null)
        {
            //await _localStorageService.SetItemAsync("authToken", response!.Token);
            //((ApiAuthenticationStateProvider)_authenticationStateProvider).MarkUserAsAuthenticated(loginModel.Email);
            //_httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", response.Token);

            CryptoResult ecryptedUsername = await cryptoService.EncryptAsync(result.Username);
            CryptoResult encryptUserRole = await cryptoService.EncryptAsync(result.UserRole);
            var newEncryptedUserSession = new UserSessionModel()
                {
                    Username = ecryptedUsername.Value,
                    UserRole = encryptUserRole.Value,
                    Token = result.Token,
                    Successful = result.Successful
                };

            await localStorageService.SetItemAsync("UserData", newEncryptedUserSession);
            (authenticationStateProvider as CustomAuthenticationStateProvider).NotifyAuthenticationState();
            navigationManager.NavigateTo("/", true);
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Error occured");
        }
    }
}