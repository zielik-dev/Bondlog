@page "/"
@page "/login"
@using Blazor.SubtleCrypto;
@using Blazored.LocalStorage;
@using Bondlog.Client.Providers;
@using Bondlog.Client.Services;
@using Bondlog.Client.Services.Identity;
@using Bondlog.Shared.Domain.Models;
@using Microsoft.AspNetCore.Components.Authorization;
@using Bondlog.Client.Interfaces;
@inject IJSRuntime Js;
@inject ILoginUserService LoginUserService;
@inject ICryptoService CryptoService;
@inject ILocalStorageService LocalStorageService;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<head>
    <link href="/css/components/login.css" rel="stylesheet" />
</head>

<h1>Login</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert"> 
        <p>@Error</p>
    </div>
}

<div class="custom-data-grid">
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Please enter your details</h5>
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="email">Email address</label>
                    <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>
                <br/>
                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>
        </div>
    </div>
</div>



@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error = "";

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;

        if (user!.Identity!.IsAuthenticated)
            NavigationManager.NavigateTo("/index");
        else
            await base.OnInitializedAsync();
    }

    public async Task HandleLogin()
    {
        ShowErrors = false;

        var result = await LoginUserService.LoginUser(loginModel);

        if (result.Token is not null || result.Username is not null || result.UserRole is not null)
        {
            CryptoResult ecryptedUsername = await CryptoService.EncryptAsync(result.Username);
            CryptoResult encryptUserRole = await CryptoService.EncryptAsync(result.UserRole);
            var newEncryptedUserSession = new UserSessionModel()
                {
                    Username = ecryptedUsername.Value,
                    UserRole = encryptUserRole.Value,
                    Token = result.Token,
                    Successful = result.Successful
                };

            await LocalStorageService.SetItemAsync("UserData", newEncryptedUserSession);
            (AuthenticationStateProvider as CustomAuthenticationStateProvider).NotifyAuthenticationState();
            NavigationManager.NavigateTo("/", true);
        }
        else
        {
            await Js.InvokeVoidAsync("alert", "Error occured");
        }
    }
}