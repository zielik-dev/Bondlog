@page "/usersandroles"
@using Bondlog.Client.Pages.Dialogs;
@using Bondlog.Shared.Domain.Models;
@using Bondlog.Client.Services.Interfaces;
@inject IDialogService DialogService
@inject IGetUsersAndRolesService GetUsersAndRolesService
@inject IRemoveUserAndRoleService RemoveUserAndRoleService;

<head>
    <link href="/css/components/user-roles.css" rel="stylesheet" />
</head>

<h3>Users And Roles</h3>

@if (userRoles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="custom-data-grid">
        <p />
        <MudButton Size="@Size.Small" AutoRefresh="true" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="() => OpenAddNewUserAndRoleDialog()">Add New User With Role</MudButton>
        <p />
        <MudDataGrid Items="@userRoles" Filterable="false" SortMode="@SortMode.None" Groupable="false">
            <Columns>
                <PropertyColumn Property="x => x.UserName" Title="User Name"/>
                <PropertyColumn Property="x => x.RoleName" Title="Role Name"/>
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudButton Size="@Size.Small" Variant="@Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="@Color.Primary" OnClick="() => OpenEditUserAndRoleDialog(context.Item)">Edit</MudButton>
                         <MudButton Size="@Size.Small" Variant="@Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="@Color.Error" OnClick="() => OpenDeleteUserAndRoleDialog(context.Item.UserId)">Delete</MudButton>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </div>
}

@code {
    private IEnumerable<UserAndRoleModel> userRoles;

    protected override async Task OnInitializedAsync()
    {
        userRoles = await GetUsersAndRolesAsync();
    }

    private async Task OpenAddNewUserAndRoleDialog()
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small
            };
        var result = await this.DialogService.Show<AddUserAndRoleDialog>("Add New User with Role", options).Result;

        if (!result.Cancelled)
            this.userRoles = await GetUsersAndRolesAsync();
    }

    private async Task OpenEditUserAndRoleDialog(UserAndRoleModel model)
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small
            };
        var parameters = new DialogParameters { { "userAndRoleModel", model } };
        var result = await this.DialogService.Show<EditUserAndRoleDialog>(string.Empty, parameters, options).Result;

        if (!result.Cancelled)
            this.userRoles = await GetUsersAndRolesAsync();
    }

    private async Task OpenDeleteUserAndRoleDialog(string userId)
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small
            };
        var parameters = new DialogParameters { { "userId", userId } };
        var result = await this.DialogService.Show<RemoveUserAndRoleDialog>(string.Empty, parameters, options).Result;

        if (!result.Cancelled)
            this.userRoles = await GetUsersAndRolesAsync();
    }

    private async Task<IEnumerable<UserAndRoleModel>> GetUsersAndRolesAsync()
    {
        userRoles = await GetUsersAndRolesService.GetUsersAndRolesAsync();
        return userRoles.OrderBy(x => x.UserName);
    }
}